<?php

namespace App\Controller;

use App\Entity\Articulo;
use App\Form\ProductType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;

use App\Service\FileUploader;
use symfony\component\security\core\user\UserInterface;
use Doctrine\ORM\Mapping\Id;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;

class ArticuloController extends AbstractController
{
    
    public function getArticulos()
    {
        $artRepo=$this->getDoctrine()->getRepository(Articulo::class);
        $art=$artRepo->findAll();
        return $this->render('articulo/index.html.twig',[
            "art"=>$art,
        ]);
    }
    public function vista()
    {
        $artRepo=$this->getDoctrine()->getRepository(Articulo::class);
        $art=$artRepo->findAll();
        return $this->render('articulo/vista.html.twig',[
            "art"=>$art,
        ]);
    }

    public function delArt(Articulo $id){
        $em = $this -> getDoctrine() -> getManager();
        $em -> remove($id);
        $em -> flush();  
        return $this->redirectToRoute('getArt');  
    }
    public function getArt(TokenStorageInterface $token)
    {
        $i=$token->getToken()->getUser();
        //$id=$i->getid();
        $artRepo=$this->getDoctrine()->getRepository(Articulo::class);
        $art=$artRepo->findAll();
        return $this->render('articulo/usArt.html.twig',[
            "art"=>$art,
            "id"=>$i,
        ]);
    }
    //////////////////////////////////////////////7
    public function new(Request $request, FileUploader $fileUploader,TokenStorageInterface  $tokenStorage)
    {
        $product = new Articulo();
        $form = $this->createForm(ProductType::class, $product);
        $form->handleRequest($request);
       $user=$tokenStorage->getToken()->getUser();
       $p= $user->getid();
        if ($form->isSubmitted() && $form->isValid()) {
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $product->getRuta();
            //$fileName = $fileUploader->upload($file);
            //$product->setRuta($fileName);
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            
            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('brochures_directory'),
                    $fileName
                );
               // $p=$id->getId();
               
                $product->setFecha(new \Datetime('now'));
                $product->setIduser($p);
                $product->setRuta($fileName);
                $em= $this->getDoctrine()->getManager();
                $em->persist($product);
                $em->flush();
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $product->setRuta($fileName);

            // ... persist the $product variable or any other work

           // return $this->redirect($this->generateUrl('app_product_list'));
        }

        return $this->render('articulo/new.html.twig', [
            'form' => $form->createView(),
            'us'=>$p
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
   
}
